datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  text      String
  pVote     Int
  nVote     Int
  date      DateTime
}

model Ratings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int
  pVote     Int
  nVote     Int
  date      DateTime
}

model Product {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  image               String
  productName         String
  price               Float
  category            String
  description         String
  stocks              Int
  seller              Seller      @relation(fields: [sellerId], references: [id])
  sellerId            String      @db.ObjectId
  offer               Float
  isAssured           Boolean
  isActive            Boolean
  otherSpecifications Json
  reviews             Reviews[]
  rating              Ratings[]
  orders              Order[]
  cart                Cart[]
  Favourite           Favourite[]
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  seller    Seller   @relation(fields: [sellerId], references: [id])
  sellerId  String   @db.ObjectId
  quantity  Int
  amount    Float
  status    Status
  orderDate DateTime
}

model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String      @unique
  password           String
  phoneNumber        String
  gender             String
  dateOfBirth        Date
  isActive           Boolean
  isVerified         Boolean
  premiumMember      Boolean
  registrationDate   DateTime
  passwordResetToken String
  verificationToken  String
  address            String
  profilePicture     String
  isBlocked          Boolean
  orders             Order[]
  favourite          Favourite[]
  cart               Cart[]
  reviews            Reviews[]
  ratings            Ratings[]
}

model Seller {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  phoneNumber         String
  email               String
  password            String
  isActive            Boolean
  isBlocked           Boolean
  passwordUpdateToken String
  products            Product[]
  orders              Order[]
}

enum Status {
  pending
  processed
  shipped
  outForDelivery
  delivered
  returned
  canceled
}

type Date {
  day   Int
  month Int
  year  Int
}
