datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model RatingsReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int
  text      String
  isValid   Boolean
  date      DateTime
}

model Product {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  image               String
  productName         String
  price               Float
  category            String
  description         String
  stocks              Int
  seller              Seller           @relation(fields: [sellerId], references: [id])
  sellerId            String           @db.ObjectId
  offer               Float
  isAssured           Boolean
  isActive            Boolean
  otherSpecifications Json
  orders              Order[]
  cart                Cart[]
  Favourite           Favourite[]
  RatingsReviews      RatingsReviews[]
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
}

model Order {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentId          String
  user               User          @relation(fields: [userId], references: [id])
  userId             String        @db.ObjectId
  address            String
  product            Product       @relation(fields: [productId], references: [id])
  productId          String        @db.ObjectId
  seller             Seller        @relation(fields: [sellerId], references: [id])
  sellerId           String        @db.ObjectId
  quantity           Int
  amount             Float
  status             Status
  paymentStatus      PaymentStatus
  shipmentTrackingId String
  orderDate          DateTime
  cancelationRequest Boolean
  returnStatus       ReturnStatus
}

model User {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String           @unique
  password           String
  phoneNumber        String
  gender             String
  dateOfBirth        Date
  isActive           Boolean
  isVerified         Boolean
  premiumMember      Boolean
  registrationDate   DateTime
  passwordResetToken String
  verificationToken  String
  address            String
  profilePicture     String
  isBlocked          Boolean
  orders             Order[]
  favourite          Favourite[]
  cart               Cart[]
  RatingsReviews     RatingsReviews[]
}

model Seller {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  phoneNumber         String
  email               String
  password            String
  isActive            Boolean
  isBlocked           Boolean
  passwordUpdateToken String
  products            Product[]
  orders              Order[]
}

model Token {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String @unique
}

enum Status {
  initiated
  pending
  processed
  shipped
  outForDelivery
  delivered
  returned
  canceled
}

enum PaymentStatus {
  pending
  failed
  received
}

enum ReturnStatus {
  none
  requested
  rejected
  returned
}

type Date {
  day   Int
  month Int
  year  Int
}
